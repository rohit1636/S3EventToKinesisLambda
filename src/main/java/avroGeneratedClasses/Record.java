package avroGeneratedClasses; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8196093701071700735L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Record\",\"fields\":[{\"name\":\"allocation\",\"type\":\"int\"},{\"name\":\"allocationTimestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"perpetual\",\"type\":\"boolean\"},{\"name\":\"preorderBackorderHandling\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"productId\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Record> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Record> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Record> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Record> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Record> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Record to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Record from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Record instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Record fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int allocation;
  private String allocationTimestamp;
  private boolean perpetual;
  private String preorderBackorderHandling;
  private int productId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Record() {}

  /**
   * All-args constructor.
   * @param allocation The new value for allocation
   * @param allocationTimestamp The new value for allocationTimestamp
   * @param perpetual The new value for perpetual
   * @param preorderBackorderHandling The new value for preorderBackorderHandling
   * @param productId The new value for productId
   */
  public Record(Integer allocation, String allocationTimestamp, Boolean perpetual, String preorderBackorderHandling, Integer productId) {
    this.allocation = allocation;
    this.allocationTimestamp = allocationTimestamp;
    this.perpetual = perpetual;
    this.preorderBackorderHandling = preorderBackorderHandling;
    this.productId = productId;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return allocation;
    case 1: return allocationTimestamp;
    case 2: return perpetual;
    case 3: return preorderBackorderHandling;
    case 4: return productId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: allocation = (Integer)value$; break;
    case 1: allocationTimestamp = value$ != null ? value$.toString() : null; break;
    case 2: perpetual = (Boolean)value$; break;
    case 3: preorderBackorderHandling = value$ != null ? value$.toString() : null; break;
    case 4: productId = (Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'allocation' field.
   * @return The value of the 'allocation' field.
   */
  public int getAllocation() {
    return allocation;
  }


  /**
   * Sets the value of the 'allocation' field.
   * @param value the value to set.
   */
  public void setAllocation(int value) {
    this.allocation = value;
  }

  /**
   * Gets the value of the 'allocationTimestamp' field.
   * @return The value of the 'allocationTimestamp' field.
   */
  public String getAllocationTimestamp() {
    return allocationTimestamp;
  }


  /**
   * Sets the value of the 'allocationTimestamp' field.
   * @param value the value to set.
   */
  public void setAllocationTimestamp(String value) {
    this.allocationTimestamp = value;
  }

  /**
   * Gets the value of the 'perpetual' field.
   * @return The value of the 'perpetual' field.
   */
  public boolean getPerpetual() {
    return perpetual;
  }


  /**
   * Sets the value of the 'perpetual' field.
   * @param value the value to set.
   */
  public void setPerpetual(boolean value) {
    this.perpetual = value;
  }

  /**
   * Gets the value of the 'preorderBackorderHandling' field.
   * @return The value of the 'preorderBackorderHandling' field.
   */
  public String getPreorderBackorderHandling() {
    return preorderBackorderHandling;
  }


  /**
   * Sets the value of the 'preorderBackorderHandling' field.
   * @param value the value to set.
   */
  public void setPreorderBackorderHandling(String value) {
    this.preorderBackorderHandling = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public int getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(int value) {
    this.productId = value;
  }

  /**
   * Creates a new Record RecordBuilder.
   * @return A new Record RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Record RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Record RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Record RecordBuilder by copying an existing Record instance.
   * @param other The existing instance to copy.
   * @return A new Record RecordBuilder
   */
  public static Builder newBuilder(Record other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Record instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Record>
    implements org.apache.avro.data.RecordBuilder<Record> {

    private int allocation;
    private String allocationTimestamp;
    private boolean perpetual;
    private String preorderBackorderHandling;
    private int productId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.allocation)) {
        this.allocation = data().deepCopy(fields()[0].schema(), other.allocation);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.allocationTimestamp)) {
        this.allocationTimestamp = data().deepCopy(fields()[1].schema(), other.allocationTimestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.perpetual)) {
        this.perpetual = data().deepCopy(fields()[2].schema(), other.perpetual);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.preorderBackorderHandling)) {
        this.preorderBackorderHandling = data().deepCopy(fields()[3].schema(), other.preorderBackorderHandling);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.productId)) {
        this.productId = data().deepCopy(fields()[4].schema(), other.productId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Record instance
     * @param other The existing instance to copy.
     */
    private Builder(Record other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.allocation)) {
        this.allocation = data().deepCopy(fields()[0].schema(), other.allocation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.allocationTimestamp)) {
        this.allocationTimestamp = data().deepCopy(fields()[1].schema(), other.allocationTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.perpetual)) {
        this.perpetual = data().deepCopy(fields()[2].schema(), other.perpetual);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.preorderBackorderHandling)) {
        this.preorderBackorderHandling = data().deepCopy(fields()[3].schema(), other.preorderBackorderHandling);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.productId)) {
        this.productId = data().deepCopy(fields()[4].schema(), other.productId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'allocation' field.
      * @return The value.
      */
    public int getAllocation() {
      return allocation;
    }


    /**
      * Sets the value of the 'allocation' field.
      * @param value The value of 'allocation'.
      * @return This builder.
      */
    public Builder setAllocation(int value) {
      validate(fields()[0], value);
      this.allocation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'allocation' field has been set.
      * @return True if the 'allocation' field has been set, false otherwise.
      */
    public boolean hasAllocation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'allocation' field.
      * @return This builder.
      */
    public Builder clearAllocation() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'allocationTimestamp' field.
      * @return The value.
      */
    public String getAllocationTimestamp() {
      return allocationTimestamp;
    }


    /**
      * Sets the value of the 'allocationTimestamp' field.
      * @param value The value of 'allocationTimestamp'.
      * @return This builder.
      */
    public Builder setAllocationTimestamp(String value) {
      validate(fields()[1], value);
      this.allocationTimestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'allocationTimestamp' field has been set.
      * @return True if the 'allocationTimestamp' field has been set, false otherwise.
      */
    public boolean hasAllocationTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'allocationTimestamp' field.
      * @return This builder.
      */
    public Builder clearAllocationTimestamp() {
      allocationTimestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'perpetual' field.
      * @return The value.
      */
    public boolean getPerpetual() {
      return perpetual;
    }


    /**
      * Sets the value of the 'perpetual' field.
      * @param value The value of 'perpetual'.
      * @return This builder.
      */
    public Builder setPerpetual(boolean value) {
      validate(fields()[2], value);
      this.perpetual = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'perpetual' field has been set.
      * @return True if the 'perpetual' field has been set, false otherwise.
      */
    public boolean hasPerpetual() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'perpetual' field.
      * @return This builder.
      */
    public Builder clearPerpetual() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'preorderBackorderHandling' field.
      * @return The value.
      */
    public String getPreorderBackorderHandling() {
      return preorderBackorderHandling;
    }


    /**
      * Sets the value of the 'preorderBackorderHandling' field.
      * @param value The value of 'preorderBackorderHandling'.
      * @return This builder.
      */
    public Builder setPreorderBackorderHandling(String value) {
      validate(fields()[3], value);
      this.preorderBackorderHandling = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'preorderBackorderHandling' field has been set.
      * @return True if the 'preorderBackorderHandling' field has been set, false otherwise.
      */
    public boolean hasPreorderBackorderHandling() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'preorderBackorderHandling' field.
      * @return This builder.
      */
    public Builder clearPreorderBackorderHandling() {
      preorderBackorderHandling = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public int getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public Builder setProductId(int value) {
      validate(fields()[4], value);
      this.productId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public Builder clearProductId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Record build() {
      try {
        Record record = new Record();
        record.allocation = fieldSetFlags()[0] ? this.allocation : (Integer) defaultValue(fields()[0]);
        record.allocationTimestamp = fieldSetFlags()[1] ? this.allocationTimestamp : (String) defaultValue(fields()[1]);
        record.perpetual = fieldSetFlags()[2] ? this.perpetual : (Boolean) defaultValue(fields()[2]);
        record.preorderBackorderHandling = fieldSetFlags()[3] ? this.preorderBackorderHandling : (String) defaultValue(fields()[3]);
        record.productId = fieldSetFlags()[4] ? this.productId : (Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Record>
    WRITER$ = (org.apache.avro.io.DatumWriter<Record>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Record>
    READER$ = (org.apache.avro.io.DatumReader<Record>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.allocation);

    out.writeString(this.allocationTimestamp);

    out.writeBoolean(this.perpetual);

    out.writeString(this.preorderBackorderHandling);

    out.writeInt(this.productId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.allocation = in.readInt();

      this.allocationTimestamp = in.readString();

      this.perpetual = in.readBoolean();

      this.preorderBackorderHandling = in.readString();

      this.productId = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.allocation = in.readInt();
          break;

        case 1:
          this.allocationTimestamp = in.readString();
          break;

        case 2:
          this.perpetual = in.readBoolean();
          break;

        case 3:
          this.preorderBackorderHandling = in.readString();
          break;

        case 4:
          this.productId = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










